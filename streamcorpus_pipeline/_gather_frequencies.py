'''gather term and document frequencies of tokens and mentions
generated by an NER transform.

.. This software is released under an MIT/X11 open source license.
   Copyright 2015 Diffeo, Inc.

'''

from __future__ import absolute_import
from collections import Counter

from streamcorpus_pipeline.stages import Configured

class gather_frequencies(Configured):
    '''Gather term and document frequencies of tokens and mentions
    generated by an NER transform identified by `tagger_id`.

    '''
    config_name = 'gather_frequencies'
    def __init__(self, config):
        super(gather_frequencies, self).__init__(config)
        self.tagger_id = self.config['tagger_id']

    def __call__(self, si, context):
        if 'string_counts' not in context:
            context['string_counts'] = Counter()
        tagger_id = self.config['tagger_id']
        if not si.body.sentences or tagger_id not in si.body.sentences:
            return None
        sentences = si.body.sentences[tagger_id]
        tokens = list(itertools.chain(*[sent.tokens for sent in sentences]))

        def add(utf8_str):
            cleansed_string = cleanse(utf8_str.decode('utf8')).encode('utf8')
            context['string_counts'][cleansed_string] += 1

        mention_id = None
        for idx, tok in enumerate(tokens):
            add(tok.token)
            if tok.mention_id != mention_id:
                ## starting a new mention
                if tok.mention_id == tokens[idx + 1].mention_id:
                    ## is multi-token mention
                    end = idx
                    while tokens[end].mention_id == tok.mention_id:
                        end += 1
                    strs_to_join = [tok.token]
                    for cursor in range(idx + 1, end):
                        mtok = tokens[cursor]
                        off1 = tokens[cursor - 1].offsets[OffsetType.BYTES]
                        off2 = mtok.offsets[OffsetType.BYTES]
                        strs_to_join.append(' ' * (off1.first + off1.length - off2.first))
                        strs_to_join.append(mtok.token)
                    add(r''.join(strs_to_join))

            mention_id = tok.mention_id

        return si
