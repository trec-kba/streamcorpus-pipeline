'''This generates the yaml file called john-smith-labels.yaml

'''
from __future__ import absolute_import, print_function
from collections import defaultdict
import os
import sys
import yaml

def paths():
    original = os.path.join(os.path.dirname(__file__), 'original')
    for root, dirs, fnames in os.walk(original):
        for fname in fnames:
            yield os.path.join(root, fname)


dd = defaultdict(list)
for path in paths():
    target_id, fname = path.strip().split('/')[-2:]
    dd[target_id].append(fname)

assert sorted(map(len, dd.values())) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4, 5, 9, 15, 20, 22, 88]


output_labels = dict(
    root_path = '.',
    source = 'bagga-and-baldwin',
    annotator_id = 'bagga-and-baldwin',
    entities = []
    )

github_base_url = 'https://raw.githubusercontent.com/trec-kba/streamcorpus-pipeline/master/'

for target_id, fnames in sorted(dd.items(), key=lambda x: (len(x[1]), int(x[0])), reverse=False):
    docs = []
    for fname in fnames:
        doc_path = os.path.join('data/john-smith/original/', target_id, fname)
        docs.append(dict(doc_path = doc_path,
                         abs_url = os.path.join(github_base_url, doc_path)))

    entity = dict(
        doc_path = docs,
        slots = ['John ur"^smith[a-z]*$"'],
        target_id = target_id,
        )
    output_labels['entities'].append(entity)

output_fname = os.path.join(os.path.dirname(__file__), 'john-smith-labels.yaml')
fh = open(output_fname, 'wb')
fh.write('''
## This was generated by streamcorpus-pipeline/data/john-smith/make-abs-urls.py
## This is intended to be used from the git repo's root directory, like so:
# 
#  streamcorpus_pipeline -c data/john-smith/john-smith-config.yaml -i data/john-smith/john-smith-labels.yaml

''')
yaml.dump(output_labels, fh)
fh.close()
print('done writing: %s' % output_fname)
